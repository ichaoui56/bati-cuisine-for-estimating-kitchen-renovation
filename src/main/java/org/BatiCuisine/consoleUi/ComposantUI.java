package org.BatiCuisine.consoleUi;

import org.BatiCuisine.models.entities.Client;
import org.BatiCuisine.models.entities.MainOeuvre;
import org.BatiCuisine.models.entities.Material;
import org.BatiCuisine.models.entities.Projet;
import org.BatiCuisine.services.Inter.MainOeuvreService;
import org.BatiCuisine.services.Inter.MaterialService;
import org.BatiCuisine.utils.ValidatorUtils;

import java.sql.SQLException;
import java.util.HashMap;

public class ComposantUI {
    private final MaterialService materialService;
    private final MainOeuvreService mainOeuvreService;
    private final HashMap<Integer, Material> addedMaterials = new HashMap<>();
    private final HashMap<Integer, MainOeuvre> addedLabors = new HashMap<>();

    public ComposantUI(MaterialService materialService, MainOeuvreService mainOeuvreService) {
        this.materialService = materialService;
        this.mainOeuvreService = mainOeuvreService;
    }

    public void addMaterial(Projet projet, Client client, ProjetUI projetUI) throws SQLException {
        boolean addMoreMaterials = true;

        while (addMoreMaterials) {
            System.out.println("\n");
            System.out.println("**===============================|(   \u001B[36müß±   Ajouter Material   üß±\u001B[0m   )|=================================**");
            System.out.println("||                                                                                                     ||");

            String nomMateriel = ValidatorUtils.validString("||                                       Entrez le nom du mat√©riau : ");
            double quantite = ValidatorUtils.validDouble("||                                Entrez la quantit√© de ce mat√©riau (en m¬≤) : ");
            double coutUnitaire = ValidatorUtils.validDouble("||                               Entrez le co√ªt unitaire de ce mat√©riau (‚Ç¨/m¬≤) : ");
            double coutTransport = ValidatorUtils.validDouble("||                               Entrez le co√ªt de transport de ce mat√©riau (‚Ç¨) : ");
            double coeffQualite = ValidatorUtils.validDouble("||         Entrez le coefficient de qualit√© du mat√©riau (1.0 = standard, > 1.0 = haute qualit√©) : ");
            System.out.println("||                                                                                                     ||");
            System.out.println("**======================================================================================================**");
            System.out.println("\n");

            Material material = new Material(coutUnitaire, quantite, coutTransport, coeffQualite, nomMateriel, 0.0, "Mat√©riel", projet);
            Material materialObj = materialService.ajouterMaterial(material);
            addedMaterials.put(materialObj.getId(), materialObj);

            if (materialObj.getId() > 0) {
                System.out.println("                                     \u001B[32m ‚úÖMat√©riau ajout√© avec succ√®s‚úÖ \u001B[0m ");
                System.out.println("\n");
            } else {
                System.out.println("                                      ‚ùåMat√©riau n'a pas √©t√© ajouter‚ùå");
                System.out.println("\n");
            }

            String response = ValidatorUtils.validBoolean("                               Voulez-vous ajouter un autre mat√©riau? (oui/non) : ") ? "oui" : "non";

            if (!response.equals("oui")) {
                addMoreMaterials = false;
                addLabor(client, projet, addedMaterials, projetUI);
            }
        }
    }

    public void addLabor(Client client, Projet projet, HashMap<Integer, Material> material, ProjetUI projetUI) throws SQLException {
        boolean addMoreLabors = true;

        while (addMoreLabors) {
            System.out.println("\n");
            System.out.println("**================================|(    \u001B[36müë∑   Ajouter MainOeuvre   üë∑\u001B[0m    )|===========================**");
            System.out.println("||                                                                                                   ||");

            String typeMainDoeuvre = ValidatorUtils.validString("||               Entrez le type de main-d'≈ìuvre (e.g., Ouvrier de base, Sp√©cialiste) : ");
            double tauxHoraire = ValidatorUtils.validDouble("||                        Entrez le taux horaire de cette main-d'≈ìuvre (‚Ç¨/h) : ");
            double heuresTravaillees = ValidatorUtils.validDouble("||                            Entrez le nombre d'heures travaill√©es : ");
            double facteurProductivite = ValidatorUtils.validDouble("||           Entrez le facteur de productivit√© (1.0 = standard, > 1.0 = haute productivit√©) : ");
            System.out.println("||                                                                                                   ||");
            System.out.println("**===================================================================================================**");
            System.out.println("\n");

            MainOeuvre mainOeuvre = new MainOeuvre(typeMainDoeuvre, 0, "Main-d'≈ìuvre", projet, tauxHoraire, heuresTravaillees, facteurProductivite);
            MainOeuvre mainOeuvreObj = mainOeuvreService.ajouterMainOeuvre(mainOeuvre);
            addedLabors.put(mainOeuvre.getId(), mainOeuvre);

            if (mainOeuvreObj.getId() > 0) {
                System.out.println("                                   ‚úÖ\u001B[32m Main-d'≈ìuvre ajout√©e avec succ√®s‚úÖ \u001B[0m ");
                System.out.println("\n");
            } else {
                System.out.println("                                   ‚ùåMain-d'≈ìuvre n'a pas √©t√© ajouter‚ùå");
                System.out.println("\n");
            }

            String response = ValidatorUtils.validBoolean("                             Voulez-vous ajouter un autre type de main-d'≈ìuvre ? (oui/non) : ") ? "oui" : "non";
            System.out.println("\n");

            if (!response.equals("oui")) {
                addMoreLabors = false;
                projetUI.finalizeProjet(client, projet, material, addedLabors);
            }
        }
    }

    public void updateTva(double tva) throws SQLException {
        for (Material material : addedMaterials.values()) {
            material.setTauxTVA(tva);
            materialService.modifierMaterialTva(material.getId(), tva);
        }

        for (MainOeuvre mainOeuvre : addedLabors.values()) {
            mainOeuvre.setTauxTVA(tva);
            mainOeuvreService.modifierMainOeuvreTva(mainOeuvre.getId(), tva);
        }
    }
}
